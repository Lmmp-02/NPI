/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package GUI;

import com.github.sarxos.webcam.Webcam;
import com.github.sarxos.webcam.WebcamPanel;
import com.github.sarxos.webcam.WebcamResolution;
import com.google.zxing.BinaryBitmap;
import com.google.zxing.LuminanceSource;
import com.google.zxing.MultiFormatReader;
import com.google.zxing.NotFoundException;
import com.google.zxing.Result;
import com.google.zxing.client.j2se.BufferedImageLuminanceSource;
import com.google.zxing.common.HybridBinarizer;
import java.awt.Dimension;
import java.awt.Image;
import java.awt.image.BufferedImage;
import java.util.List;
import java.util.concurrent.Executor;
import java.util.concurrent.Executors;
import java.util.concurrent.ThreadFactory;
import java.util.logging.Level;
import javax.swing.ImageIcon;
import javax.swing.JPanel;
import qr_scanner.Horario;
/**
 *
 * @author skyma
 */
public class LecturaQR extends javax.swing.JPanel implements Runnable, ThreadFactory {
    private WebcamPanel panel = null;
    private Webcam webcam = null;
    private Executor executor = Executors.newSingleThreadExecutor(this);
    private Ventana padre;
    private String ruta;
    private javax.swing.JLabel horarioLabel;
    /**
     * Creates new form LecturaQR
     */
    public LecturaQR(Ventana p) {
        this.padre = p;
        initComponents();
        initWebcam();
    }
    public String getLectura() {
        return campo_resultado.getText();
    }


    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        campo_resultado = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();

        setOpaque(false);
        setPreferredSize(new java.awt.Dimension(1072, 1600));

        campo_resultado.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                campo_resultadoActionPerformed(evt);
            }
        });

        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(418, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 370, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(campo_resultado, javax.swing.GroupLayout.PREFERRED_SIZE, 320, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(375, 375, 375))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 580, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(487, Short.MAX_VALUE)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(46, 46, 46)
                .addComponent(campo_resultado, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 636, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(526, 526, 526))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void campo_resultadoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_campo_resultadoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_campo_resultadoActionPerformed
    private void initWebcam() {
        List<Webcam> lista_webcams;
        Dimension size = WebcamResolution.QVGA.getSize();

        do {
            lista_webcams = Webcam.getWebcams();
        } while (lista_webcams.isEmpty());

        webcam = lista_webcams.get(1);
        webcam.setViewSize(size);

        WebcamPanel panel = new WebcamPanel(webcam);
        panel.setPreferredSize(size);
        panel.setFPSDisplayed(true);

        jPanel1.add(panel, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 470, 300));

        executor.execute(this);
    }
    public String actualizarImagen(String textoQR) {
        switch (textoQR) {
            case "inf1A1":
                // Asegúrate de reemplazar estas rutas con las rutas a tus imágenes
                ruta="./recursos/comunes/horarios/inf1A1.png";
                break;
            case "inf1A2":
                // Asegúrate de reemplazar estas rutas con las rutas a tus imágenes
                ruta="./recursos/comunes/horarios/inf1A2.png";
                break;
            case "inf1B1":
                // Asegúrate de reemplazar estas rutas con las rutas a tus imágenes
                ruta="./recursos/comunes/horarios/inf1B1.png";
                break;
            case "inf1B2":
                // Asegúrate de reemplazar estas rutas con las rutas a tus imágenes
                ruta="./recursos/comunes/horarios/inf1B2.png";
                break;
            case "inf2A1":
                // Asegúrate de reemplazar estas rutas con las rutas a tus imágenes
                ruta="./recursos/comunes/horarios/inf2A1.png";
                break;
            case "inf2A2":
                // Asegúrate de reemplazar estas rutas con las rutas a tus imágenes
                ruta="./recursos/comunes/horarios/inf2A2.png";
                break;
            case "inf2B1":
                // Asegúrate de reemplazar estas rutas con las rutas a tus imágenes
                ruta="./recursos/comunes/horarios/inf2B1.png";
                break;
            case "inf2B2":
                // Asegúrate de reemplazar estas rutas con las rutas a tus imágenes
                ruta="./recursos/comunes/horarios/inf2B2.png";
                break;
            case "inf3A1":
                // Asegúrate de reemplazar estas rutas con las rutas a tus imágenes
                ruta="./recursos/comunes/horarios/inf3A1.png";
                break;
            case "inf3B1":
                // Asegúrate de reemplazar estas rutas con las rutas a tus imágenes
                ruta="./recursos/comunes/horarios/inf3B1.png";
                break;
            case "inf4CSI1":
                // Asegúrate de reemplazar estas rutas con las rutas a tus imágenes
                ruta="./recursos/comunes/horarios/inf4CSI1.png";
                break;
            case "inf4CSI2":
                // Asegúrate de reemplazar estas rutas con las rutas a tus imágenes
                ruta="./recursos/comunes/horarios/inf4CSI2.png";
                break;
            case "inf4IC1":
                // Asegúrate de reemplazar estas rutas con las rutas a tus imágenes
                ruta="./recursos/comunes/horarios/inf4IC1.png";
                break;
            case "inf4IC2":
                // Asegúrate de reemplazar estas rutas con las rutas a tus imágenes
                ruta="./recursos/comunes/horarios/inf4IC2.png";
                break;  
            case "inf4IS1":
                // Asegúrate de reemplazar estas rutas con las rutas a tus imágenes
                ruta="./recursos/comunes/horarios/inf4IS1.png";
                break;
            case "inf4IS2":
                // Asegúrate de reemplazar estas rutas con las rutas a tus imágenes
                ruta="./recursos/comunes/horarios/inf4IS2.png";
                break;  
            case "inf4SI1":
                // Asegúrate de reemplazar estas rutas con las rutas a tus imágenes
                ruta="./recursos/comunes/horarios/inf4SI1.png";
                break;
            case "inf4SI2":
                // Asegúrate de reemplazar estas rutas con las rutas a tus imágenes
                ruta="./recursos/comunes/horarios/inf4SI2.png";
                break;  
            case "inf4TI1":
                // Asegúrate de reemplazar estas rutas con las rutas a tus imágenes
                ruta="./recursos/comunes/horarios/inf4TI1.png";
                break;
            case "inf4TI2":
                // Asegúrate de reemplazar estas rutas con las rutas a tus imágenes
                ruta="./recursos/comunes/horarios/inf4TI2.png";
                break;                  
            // Agrega más casos según sea necesario
            default:
                //jLabel1.setIcon(new ImageIcon("./recursos/comunes/fotos/2.jpg"));
                ruta="./recursos/comunes/horarios/inf4CSI1.png";
                break;
        }
        return ruta;
    }
        



    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField campo_resultado;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    // End of variables declaration//GEN-END:variables
        public void closeWebcam() {
        if (webcam.isOpen()) {
            webcam.close();
        }
    }


    @Override
    public void run() {
        while (true) {
            try {
                Thread.sleep(100);
            } catch (InterruptedException ex) {
                java.util.logging.Logger.getLogger(LeerCodigoQR.class.getName()).log(Level.SEVERE, null, ex);
                return;
            }

            Result resultado = null;
            BufferedImage imagen = null;

            if (webcam.isOpen()) {
                imagen = webcam.getImage();
                if (imagen == null) {
                    continue;
                }
            }

            LuminanceSource fuente = new BufferedImageLuminanceSource(imagen);
            BinaryBitmap bitmap = new BinaryBitmap(new HybridBinarizer(fuente));

            try {
                resultado = new MultiFormatReader().decode(bitmap);
            } catch (NotFoundException ex) {
                continue; // No se encontró un código QR
            }

            if (resultado != null) {
                String textoQR = resultado.getText();
                javax.swing.SwingUtilities.invokeLater(() -> {
                    campo_resultado.setText(textoQR);
                    closeWebcam();                    // Actualizar y mostrar el JLabel con la imagen del Horario
                    jPanel1.setVisible(false);
                        ImageIcon icon = new ImageIcon(actualizarImagen(textoQR));
                        Image image = icon.getImage().getScaledInstance(jLabel1.getWidth(), jLabel1.getHeight(), Image.SCALE_SMOOTH);
                        jLabel1.setIcon(new ImageIcon(image));
                    // Suponiendo que Horario.actualizarImagen establece una imagen en un JLabel interno
                    campo_resultado.setVisible(false);

                    

                    // Ocultar o deshabilitar otros componentes de LeerCodigoQR
                    jLabel1.setText("");                
                    panel.setVisible(false);
                    
                    
                });
                break; // Detiene el bucle, finaliza el hilo
            }
        }
    }

    @Override
    public Thread newThread(Runnable r) {
        Thread t = new Thread(r, "Nueva hebra");
        t.setDaemon(true);
        return t;
    }
}
